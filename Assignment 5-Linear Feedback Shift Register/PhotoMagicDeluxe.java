
/*************************************************************************
 * Name         : Murray Lynch
 * NetID        : mdlynch
 * Precept      : P04
 *
 * Dependencies : PhotoMagic.java, LFSR.java
 * Description  : Implements enrcyption and decryption of user-provided images
 *                by xor-ing pseudo-random values generated by a linear feedback
 *                shift register, the seed of which is provided by the user with
 *                an alphanumeric password that is then converted to binary.
 *                The tap for the LFSR is also user-provided to form a password
 *                combination. The reversal of this method decrypts an encrypted
 *                image provided the password combination is the same as given 
 *                for the encryption process.
 *  
 *************************************************************************/


public class PhotoMagicDeluxe
{
    // index of possible characters of alphanumeric password
    private static final String BASE64 = 
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    // the number of bits with which to store each character
    private static final int NUMBITS = 6;
    
    
    // given an alphanumeric password, convert it to
    // and return a binary password
    public static String toSeed(String alpha)
    {
        // initialize String to contain binary seed
        String bits = "";
        
        // for each character, determine binary value and string them together
        for (int i = 0; i < alpha.length(); i++)
        {
            // select character
            char c = alpha.charAt(i);
            
            // determine its decimal value from base64 index
            int index = BASE64.indexOf(c);
            
            // perform a decimal to binary string conversion
            for (int j = NUMBITS-1; j >= 0; j--)
            {
                // value indicated by current bit
                int bitValue = (int) Math.pow(2, j);
                
                // if index decimal contains value, concatenate 1 and subtract
                // that value, else concatenate 0.
                if (index / bitValue == 1)
                {
                    bits = bits.concat("1");
                    index -= bitValue;
                }
                else bits = bits.concat("0");           
            }
 
        }
        
        return bits;
    }
    
    // return a transformed copy of picture using lfsr
    public static Picture transform(Picture picture, LFSR lfsr)  
    {
        // use method from PhotoMagic class to transform picture
        return PhotoMagic.transform(picture, lfsr);
    }
    
    // explanation above    
    public static void main(String[] args)                    
    {
        // create new picture from filename given in argument
        Picture source = new Picture(args[0]);
        
        // determine bit seed from alphanumeric password provided by user
        String bitPassword = toSeed(args[1]);

        // create new linear feedback shift register from binary password
        // and tap number
        LFSR lfsr = new LFSR(bitPassword, Integer.parseInt(args[2]));
        
        // create new picture from return value of transform method
        Picture target = transform(source, lfsr);
        
        // display transformed image
        target.show();
        
    }
}